!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
INFINITY	asciinode.h	175;"	d
MAX	asciinode.h	/^int MAX (int X, int Y)  $/;"	f
MAX_HEIGHT	asciinode.h	172;"	d
MIN	asciinode.h	/^int MIN (int X, int Y)  $/;"	f
PrpsTree	print.h	/^struct PrpsTree $/;"	s
Tree	asciinode.h	/^struct Tree $/;"	s
Tree	asciinode.h	/^typedef struct Tree Tree;$/;"	t	typeref:struct:Tree
asciinode	asciinode.h	/^typedef struct asciinode_struct asciinode;$/;"	t	typeref:struct:asciinode_struct
asciinode_struct	asciinode.h	/^struct asciinode_struct$/;"	s
asciinode_struct	print.h	/^struct asciinode_struct$/;"	s
build_ascii_tree	asciinode.h	/^asciinode * build_ascii_tree(Tree * t) $/;"	f
build_ascii_tree	print.h	/^asciinode * build_ascii_tree(PrpsTree * t) $/;"	f
build_ascii_tree_recursive	asciinode.h	/^asciinode * build_ascii_tree_recursive(Tree * t) $/;"	f
build_ascii_tree_recursive	print.h	/^asciinode * build_ascii_tree_recursive(PrpsTree * t) $/;"	f
compute_edge_lengths	asciinode.h	/^void compute_edge_lengths(asciinode *node) $/;"	f
compute_edge_lengths	print.h	/^void compute_edge_lengths(asciinode *node) $/;"	f
compute_lprofile	asciinode.h	/^void compute_lprofile(asciinode *node, int x, int y) $/;"	f
compute_lprofile	print.h	/^void compute_lprofile(asciinode *node, int x, int y) $/;"	f
compute_rprofile	asciinode.h	/^void compute_rprofile(asciinode *node, int x, int y) $/;"	f
compute_rprofile	print.h	/^void compute_rprofile(asciinode *node, int x, int y) $/;"	f
edge_length	asciinode.h	/^  int edge_length; $/;"	m	struct:asciinode_struct
edge_length	print.h	/^  int edge_length; $/;"	m	struct:asciinode_struct
element	asciinode.h	/^  int element;$/;"	m	struct:Tree
element	print.h	/^  int element;$/;"	m	struct:PrpsTree
find	asciinode.h	/^Tree *find(int elem, Tree *t)$/;"	f
find_max	asciinode.h	/^Tree *find_max(Tree *t)$/;"	f
find_min	asciinode.h	/^Tree *find_min(Tree *t)$/;"	f
free_ascii_tree	asciinode.h	/^void free_ascii_tree(asciinode *node) $/;"	f
free_ascii_tree	print.h	/^void free_ascii_tree(asciinode *node) $/;"	f
gap	asciinode.h	/^int gap = 3;  $/;"	v
height	asciinode.h	/^  int height;      $/;"	m	struct:asciinode_struct
height	print.h	/^  int height;      $/;"	m	struct:asciinode_struct
insert	asciinode.h	/^Tree * insert(int value, Tree * t) $/;"	f
label	asciinode.h	/^  char label[11];  $/;"	m	struct:asciinode_struct
label	print.h	/^  char label[11];  $/;"	m	struct:asciinode_struct
lablen	asciinode.h	/^  int lablen;$/;"	m	struct:asciinode_struct
lablen	print.h	/^  int lablen;$/;"	m	struct:asciinode_struct
left	asciinode.h	/^  Tree * left, * right;$/;"	m	struct:Tree
left	asciinode.h	/^  asciinode * left, * right;$/;"	m	struct:asciinode_struct
left	print.h	/^  PrpsTree * left, * right;$/;"	m	struct:PrpsTree
left	print.h	/^  asciinode * left, * right;$/;"	m	struct:asciinode_struct
lprofile	asciinode.h	/^int lprofile[MAX_HEIGHT];$/;"	v
main	asciinode.h	/^void main() $/;"	f
main	main.c	/^int main()$/;"	f
make_empty	asciinode.h	/^Tree *make_empty(Tree *t)$/;"	f
parent_dir	asciinode.h	/^  int parent_dir;   $/;"	m	struct:asciinode_struct
parent_dir	print.h	/^  int parent_dir;   $/;"	m	struct:asciinode_struct
print_ascii_tree	asciinode.h	/^void print_ascii_tree(Tree * t) $/;"	f
print_ascii_tree	print.h	/^void print_ascii_tree(PrpsTree * t) $/;"	f
print_level	asciinode.h	/^void print_level(asciinode *node, int x, int level) $/;"	f
print_level	print.h	/^void print_level(asciinode *node, int x, int level) $/;"	f
print_next	asciinode.h	/^int print_next;    $/;"	v
right	asciinode.h	/^  Tree * left, * right;$/;"	m	struct:Tree
right	asciinode.h	/^  asciinode * left, * right;$/;"	m	struct:asciinode_struct
right	print.h	/^  PrpsTree * left, * right;$/;"	m	struct:PrpsTree
right	print.h	/^  asciinode * left, * right;$/;"	m	struct:asciinode_struct
rprofile	asciinode.h	/^int rprofile[MAX_HEIGHT];$/;"	v
